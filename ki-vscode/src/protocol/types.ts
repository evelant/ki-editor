/*
 Generated by typeshare 1.11.0
*/

export interface BufferContentParams {
	uri: string;
	content: string;
}

/** VS Code Position */
export interface Position {
	line: number;
	character: number;
}

export interface Range {
	start: Position;
	end: Position;
}

export enum DiagnosticSeverity {
	Warning = "Warning",
	Hint = "Hint",
	Information = "Information",
	Error = "Error",
}

export interface Diagnostic {
	range: Range;
	message: string;
	severity?: DiagnosticSeverity;
}

export interface BufferDiagnostics {
	path: string;
	diagnostics: Diagnostic[];
}

export interface DiffEdit {
	range: Range;
	new_text: string;
}

export interface BufferDiffParams {
	buffer_id: string;
	edits: DiffEdit[];
}

export interface Selection {
	anchor: Position;
	active: Position;
	is_extended?: boolean;
}

export interface BufferOpenParams {
	uri: string;
	selections: Selection[];
	content: string;
}

export interface BufferParams {
	uri: string;
}

export interface CommandParams {
	name: string;
	args: string[];
	success?: boolean;
}

export interface CursorParams {
	buffer_id: string;
	anchors: Position[];
	actives: Position[];
}

export enum EditorAction {
	Undo = "undo",
	Redo = "redo",
	Save = "save",
	ForceSave = "forceSave",
	Copy = "copy",
	Cut = "cut",
	Paste = "paste",
	SelectAll = "selectAll",
}

export interface EditorActionParams {
	action: EditorAction;
	buffer_id?: string;
}

export interface ExternalBufferParams {
	buffer_id: string;
	content: string;
}

export type InputMessage = 
	| { tag: "ping", params?: string }
	| { tag: "buffer.open", params: BufferOpenParams }
	| { tag: "buffer.close", params: BufferParams }
	| { tag: "buffer.save", params: BufferParams }
	| { tag: "buffer.change", params: BufferDiffParams }
	| { tag: "buffer.active", params: BufferParams }
	| { tag: "editor.syncBufferResponse", params: BufferContentParams }
	| { tag: "selection.set", params: SelectionSet }
	| { tag: "mode.set", params: TypedModeParams }
	| { tag: "keyboard.input", params: KeyboardParams }
	| { tag: "viewport.change", params: ViewportParams }
	| { tag: "diagnostics.change", params: BufferDiagnostics[] }
	| { tag: "prompt.enter", params: string };

export interface InputMessageWrapper {
	message: InputMessage;
	id: number;
}

export interface JumpTarget {
	key: string;
	position: Position;
}

export interface JumpsParams {
	uri: string;
	targets: JumpTarget[];
}

export interface KeyboardParams {
	key: string;
	timestamp: number;
	mode?: string;
	is_composed: boolean;
	uri: string;
	/**
	 * This is necessary for resolving content desync
	 * between Ki and the host application
	 */
	content_hash: number;
}

export interface LineRange {
	start: number;
	end: number;
}

export interface MarksParams {
	uri: string;
	marks: Range[];
}

export interface ModeParams {
	mode: string;
	buffer_id?: string;
}

export type OutputMessage = 
	| { tag: "ping", params: string }
	| { tag: "error", params: string }
	/** TODO: handle this on VS Code side */
	| { tag: "buffer.open", params: BufferParams }
	| { tag: "buffer.save", params: BufferParams }
	| { tag: "buffer.diff", params: BufferDiffParams }
	| { tag: "selection.update", params: SelectionSet }
	| { tag: "mode.change", params: TypedModeParams }
	| { tag: "selection_mode.change", params: SelectionModeParams }
	| { tag: "viewport.change", params: ViewportParams }
	| { tag: "prompt.opened", params: PromptOpenedParams }
	| { tag: "editor.jump", params: JumpsParams }
	| { tag: "editor.mark", params: MarksParams }
	| { tag: "lsp.definition", params?: undefined }
	| { tag: "lsp.hover", params?: undefined }
	| { tag: "lsp.references", params?: undefined }
	| { tag: "lsp.declaration", params?: undefined }
	| { tag: "lsp.typeDefinition", params?: undefined }
	| { tag: "lsp.implementation", params?: undefined }
	| { tag: "editor.keyboardLayout", params: string }
	| { tag: "lsp.rename", params?: undefined }
	| { tag: "lsp.codeAction", params?: undefined }
	| { tag: "lsp.documentSymbols", params?: undefined }
	| { tag: "editor.syncBufferRequest", params: {
	uri: string;
}};

export interface ResponseError {
	code: number;
	message: string;
	data?: any | undefined;
}

export interface OutputMessageWrapper {
	message: OutputMessage;
	id: number;
	error?: ResponseError;
}

export interface PromptItem {
	label: string;
	details?: string;
}

export interface PromptOpenedParams {
	title: string;
	items: PromptItem[];
}

export interface SearchParams {
	buffer_id: string;
	query: string;
	case_sensitive?: boolean;
	whole_word?: boolean;
	regex?: boolean;
}

export type SelectionMode = 
	| { type: "Character", params?: undefined }
	| { type: "Line", params?: undefined }
	| { type: "LineFull", params?: undefined }
	| { type: "Word", params?: undefined }
	| { type: "WordFine", params?: undefined }
	| { type: "Token", params?: undefined }
	| { type: "Custom", params?: undefined }
	| { type: "SyntaxNode", params?: undefined }
	| { type: "SyntaxNodeFine", params?: undefined }
	| { type: "Mark", params?: undefined }
	| { type: "Find", params: {
	search: string;
}}
	| { type: "Diagnostic", params: DiagnosticKind }
	| { type: "GitHunk", params?: undefined }
	| { type: "LocalQuickfix", params?: undefined };

export interface SelectionModeParams {
	mode: SelectionMode;
	buffer_id?: string;
}

export interface SelectionSet {
	buffer_id: string;
	primary?: number;
	selections: Selection[];
}

export enum EditorMode {
	Normal = "normal",
	Insert = "insert",
	MultiCursor = "multiCursor",
	FindOneChar = "findOneChar",
	Swap = "swap",
	Replace = "replace",
	Extend = "extend",
}

export interface TypedModeParams {
	mode: EditorMode;
	buffer_id?: string;
}

export interface ViewportParams {
	buffer_id: string;
	visible_line_ranges: LineRange[];
}

export enum DiagnosticKind {
	Error = "Error",
	Information = "Information",
	Warning = "Warning",
	All = "All",
	Hint = "Hint",
}

